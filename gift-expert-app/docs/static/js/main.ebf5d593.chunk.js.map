{"version":3,"sources":["pages/componentes/AddCategory.js","helpers/getGifs.js","pages/componentes/GifGridItem.js","pages/componentes/GifGrid.js","hooks/useFetchGifs.js","pages/GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setImputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAmB5C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC7CN,EAAc,MAKjB,SAEE,uBACAO,KAAK,OACLC,MAAOT,EACPU,SAtBoB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCLjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAWH,GAD7C,+DAEDI,MAAOF,GAFN,cAEdG,EAFc,gBAGCA,EAAKC,OAHN,uBAGbC,EAHa,EAGbA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATtB,kBAcbM,GAda,4CAAH,sDCDRO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAElC,OACI,sBAAKc,UAAU,4CAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAMA,EAAN,WCHGO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAAEA,GAAa,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAiBtC,OAVCC,qBAAY,WACTxB,EAASC,GACRwB,MAAM,SAAAC,GAAI,OAAIH,EAAS,CACpBf,KAAMkB,EACNL,SAAS,SAId,IAEIC,EDduBK,CAAc1B,GAAjCa,EAHwB,EAG7BN,KAAaa,EAHgB,EAGhBA,QAanB,OACI,qCACI,oBAAIJ,UAAU,yDAAd,SAAuEhB,IAEtEoB,GAAW,2CAChB,qBAAKJ,UAAU,YAAf,SACE,6BAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEMA,GADDA,EAAIC,eEChBgB,EA3BM,WAAK,MAEczC,mBAAS,CAAC,WAFxB,mBAEfQ,EAFe,KAEHT,EAFG,KAOtB,OAAQ,qCACR,oBAAI+B,UAAU,sFAAd,4BACA,cAAC,EAAD,CAAa/B,cAAiBA,IAC9B,uBAGA,oBAAI+B,UAAU,aAAd,SACKtB,EAAWe,KAAK,SAAAT,GAAQ,OAC1B,cAAC,EAAD,CAEAA,SAAWA,GADNA,YCRG4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACR,cAAC,EAAD,IACCC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.ebf5d593.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setImputValue] = useState('')\r\n    \r\n    const handleInputChange = (e)=>{\r\n       \r\n        setImputValue(e.target.value)\r\n    }\r\n\r\n\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n        if(inputValue.trim().length > 2){\r\n            \r\n           setCategories(categories => [ inputValue, ...categories,])\r\n           setImputValue('')\r\n\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n        \r\n          <input\r\n          type=\"text\"\r\n          value={inputValue} \r\n          onChange={handleInputChange}\r\n          />\r\n        \r\n        </form>\r\n    )\r\n\r\n\r\n   \r\n}\r\n\r\nAddCategory.propTypes = {   //PRESTA ATENCION A LO QUE ESCRIBIS\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","\r\n\r\n\r\n export const getGifs = async( category )=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=HIPhfyaQrn4nuqtfo895eIL3izUwuSwq`\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json()\r\n\r\n    const gifs = data.map (img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    \r\n    return gifs\r\n   \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id,title,url}) => {\r\n    //console.log(id,title,url);\r\n    return (\r\n        <div className=\"card animate__animated animate__heartBeat\">\r\n          <img src={url} alt={title} />\r\n          <p> { title } </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n   const {data:images, loading} = useFetchGifs( category );\r\n \r\n//  useEffect ( () => {\r\n//         getGifs( category )\r\n//         .then (imgs => setImages( imgs ))\r\n    \r\n       \r\n//     }, [ category ])\r\n\r\n   \r\n\r\n    //getGifs()\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__bounce animate__repeat-3\t3'>{category}</h3>\r\n\r\n            {loading && <p>Loading...</p>}\r\n        <div className=\"card-grid\">\r\n          <ul>\r\n              {\r\n                  images.map( img =>(\r\n                      <GifGridItem \r\n                      key={img.id}\r\n                       { ...img }/>\r\n                  ))\r\n              }\r\n          </ul>\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category )=>{\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n     useEffect ( () => {\r\n        getGifs( category )\r\n        .then (imgs => setstate({\r\n            data: imgs,\r\n            loading: false })\r\n            )\r\n    \r\n       \r\n    }, [])\r\n\r\n    return state\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './componentes/AddCategory';\r\nimport { GifGrid } from './componentes/GifGrid';\r\n\r\nconst GifExpertApp = ()=> {\r\n    //const categories = ['Soccer', 'Tennis', 'Rugby']\r\n    const [categories, setCategories] = useState(['Soccer']);\r\n    // const handleAdd = () =>{\r\n    //     setCategories([...categories,  'Basquet']);\r\n    //     // setCategories (categories => [...categories, 'basquet'] {})\r\n    // }\r\n    return (<>\r\n    <h2 className='animate__animated animate__headShake animate__infinite\tinfinite animate__slower 3s'> GifExpert App</h2>\r\n    <AddCategory setCategories = {setCategories} />\r\n    <hr />\r\n    \r\n\r\n    <ol className='categories'>\r\n       { categories.map( category => \r\n       <GifGrid\r\n       key={category}\r\n       category={ category }  />     \r\n       )\r\n    }\r\n    </ol>\r\n    </>  )\r\n    \r\n\r\n\r\n}\r\n\r\nexport default GifExpertApp","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './pages/GifExpertApp';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}